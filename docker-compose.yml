#
# Package, deploy, serve meteor application.
#
#   The packaging service requires centrality/meteor-build. Pull this image from
#     from the centrality docker registry, or build it:
#       `docker build --file ./ci/docker/meteor-build.dockerfile --tag centrality/meteor-build .`
#
#   Service workflows:
#      - testing: meteor-build -> testing + mongodb (--abort-on-container-exit)
#      - development: meteor-build -> testing -> packager -> runtime + mongodb
#      - production: meteor-build -> packager -> runtime (prod configs)
#

version: '3.2'

services:

  #
  # Database service.
  #
  mongodb:
    image: mongo:3.4
    ports:
      - "27017:27017"

  #
  # Test runner service.
  #
  testing:
    image: blockeeper_environment

    environment:
      - MONGO_URL=mongodb://database:27017/meteor
      # No client testing yet - will need browser drivers etc set up.
      - TEST_CLIENT=0

    command: >
      bash -c "
        cd /opt/working &&
        npm run test:once"

    # Link a hostname alias to our database server for use in
    # our connection strings.
    links:
      - "mongodb:database"

  #
  # Building and packaging service.
  #
  packager:

    build:
      context: . 
      dockerfile: ./ci/docker/packager.dockerfile

    # Mount host directory to retrieve our build artifacts.
    volumes:
      - ./artifacts/:/artifacts

    # Copy our package artifacts back to our host. 
    # - working directory should be reset to root (/ build context).
    # - use our minifier tool to compress the source.
    # - bundle the artifacts into a tarball for fast copying to host
    # - copy to host
    command: >
      bash -c "
        set -ex &&

        cd /opt/deployment/bundle/programs/web.browser/app &&
        node /opt/working/.tools/minify-app.js &&

        cd /opt/deployment/bundle/ &&
        tar -zcf build-artifacts.tar.gz * &&

        cp build-artifacts.tar.gz /artifacts/"

  #
  # Node runtime service. Based on the "deployment" sevice image.
  #
  runtime:
    build:
      context: .
      dockerfile: ./ci/docker/runtime.dockerfile

    environment:
      - MONGO_URL=mongodb://database:27017/meteor
      - ROOT_URL=http://localhost
      - PORT=80

    # Start the built meteor server.
    command: >
      bash -c "
        cd /artifacts &&
        node main.js"
    
    # Link a hostname alias to our database server for use in
    # our connection strings.
    links:
      - "mongodb:database"

    ports:
      - "80:80"