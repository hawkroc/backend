#
# Package, deploy, serve meteor application.
#
#   The packaging service requires centrality/meteor-build. Pull this image from
#     from the centrality docker registry, or build it:
#       `docker build --file ./ci/docker/meteor-build.dockerfile --tag centrality/meteor-build .`
#
#   Service workflows:
#      - development: meteor-build -> packager -> testing -> runtime (dev configs)
#      - production: meteor-build -> packager -> runtime (prod configs)
#

version: '3.2'

services:

  #
  # Test runner service.
  #
  testing:
    image: blockeeper_packager

    environment:
      # No client testing yet - will need browser drivers etc set up.
      - TEST_CLIENT=0

      # Unsetting build profiling for dev build.
      - METEOR_PROFILE=
      - METEOR_DEBUG_BUILD=

    command: >
      bash -c "
        set -ex &&
        cd /opt/working &&
        meteor npm run test:once"

  #
  # Building and packaging service.
  #
  packager:

    build:
      context: . 
      dockerfile: ./ci/docker/packager.dockerfile

    # Mount host directory to retrieve our build artifacts.
    volumes:
      - ./artifacts/:/artifacts

    # Copy our build artifacts back to our host.
    # - assume artifact is in our current WORKDIR from dockerfile.
    # - use compose BUILD to create the artifact, use UP to copy it to host.
    command: >
      bash -c "
        set -ex &&
        cp build-artifacts.tar.gz /artifacts/"

  #
  # Node runtime service.
  #
  runtime:
    build:
      context: .
      dockerfile: ./ci/docker/runtime.dockerfile

    environment:
      # Default for running containers locally. Deployed container environments
      # should be configured with secrets in the k8-config file.
      - MONGO_URL=mongodb://database:27017/meteor

    ports:
      - "80:80"