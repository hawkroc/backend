#
# Package, deploy, serve meteor application.
#
#   service workflows:
#      - testing: environment -> testing + mongodb (--abort-on-container-exit)
#      - development: environment -> testing -> packager -> runtime + mongodb
#      - production: environment -> packager -> runtime (prod configs)
#

version: '3.2'

services:
  # Meteor framework service and complete build context on node.
  environment:
    build:
      context: .
      dockerfile: ./ci/docker/environment.dockerfile

  #
  # Database service.
  #
  mongodb:
    image: mongo:3.4
    ports:
      - "27017:27017"

  #
  # Test runner service.
  #
  testing:
    image: blockeeper_environment

    environment:
      - MONGO_URL=mongodb://database:27017/meteor
      # No client testing yet - will need browser drivers etc set up.
      - TEST_CLIENT=0

    command: >
      bash -c "
        cd /opt/working &&
        npm run test:once"

    # Link a hostname alias to our database server for use in
    # our connection strings.
    links:
      - "mongodb:database"

  #
  # Building and packaging service.
  #
  packager:
    # Named so we can retrieve copied artifacts before bringing down manually.
    container_name: blockeeper_packager-artifacts

    build:
      context: . 
      dockerfile: ./ci/docker/packager.dockerfile

    # Mount host directory to retrieve our build artifacts.
    volumes:
      - ./artifacts/:/artifacts

    # Copy our package artifacts back to our host. Working directory should
    # be reset to root.
    command: >
      bash -c "
        cp --recursive ./opt/deployment/bundle/. ./artifacts
        exit 0"

  #
  # Node runtime service. Based on the "deployment" sevice image.
  #
  runtime:
    build:
      context: .
      dockerfile: ./ci/docker/runtime.dockerfile

    # Container name required by CI pipeline scripts. The default values
    # for environment vars are set in the configured .env file.
    container_name: ${IMAGE_NAME}

    environment:
      - MONGO_URL=mongodb://database:27017/meteor
      - ROOT_URL=http://localhost
      - PORT=80

    # Start the built meteor server.
    command: >
      bash -c "
        cd /artifacts &&
        node main.js"
    
    # Link a hostname alias to our database server for use in
    # our connection strings.
    links:
      - "mongodb:database"

    ports:
      - "80:80"